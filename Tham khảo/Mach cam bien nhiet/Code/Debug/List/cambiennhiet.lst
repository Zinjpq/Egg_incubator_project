
AVRASM ver. 2.1.30  C:\Users\Admin\Desktop\Mach cam bien nhiet\Code\Debug\List\cambiennhiet.asm Thu Sep 23 12:27:09 2021

C:\Users\Admin\Desktop\Mach cam bien nhiet\Code\Debug\List\cambiennhiet.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Admin\Desktop\Mach cam bien nhiet\Code\Debug\List\cambiennhiet.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Admin\Desktop\Mach cam bien nhiet\Code\Debug\List\cambiennhiet.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Admin\Desktop\Mach cam bien nhiet\Code\Debug\List\cambiennhiet.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\Admin\Desktop\Mach cam bien nhiet\Code\Debug\List\cambiennhiet.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _temp=R5
                 	.DEF _m=R4
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0046 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 484e
00002b 4549
00002c 2054
00002d 4f44      	.DB  0x4E,0x48,0x49,0x45,0x54,0x20,0x44,0x4F
00002e 003a
00002f 432a
000030 4300
000031 4941      	.DB  0x3A,0x0,0x2A,0x43,0x0,0x43,0x41,0x49
000032 4420
000033 5441
000034 003a      	.DB  0x20,0x44,0x41,0x54,0x3A,0x0
                 _0x2000003:
000035 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000036 000a      	.DW  0x0A
000037 0160      	.DW  _0x23
000038 0054      	.DW  _0x0*2
                 
000039 0003      	.DW  0x03
00003a 016a      	.DW  _0x23+10
00003b 005e      	.DW  _0x0*2+10
                 
00003c 0009      	.DW  0x09
00003d 016d      	.DW  _0x23+13
00003e 0061      	.DW  _0x0*2+13
                 
00003f 0003      	.DW  0x03
000040 0176      	.DW  _0x23+22
000041 005e      	.DW  _0x0*2+10
                 
000042 0002      	.DW  0x02
000043 0179      	.DW  __base_y_G100
000044 006a      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000045 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000046 94f8      	CLI
000047 27ee      	CLR  R30
000048 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000049 e0f1      	LDI  R31,1
00004a bffb      	OUT  GICR,R31
00004b bfeb      	OUT  GICR,R30
00004c bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004d e08d      	LDI  R24,(14-2)+1
00004e e0a2      	LDI  R26,2
00004f 27bb      	CLR  R27
                 __CLEAR_REG:
000050 93ed      	ST   X+,R30
000051 958a      	DEC  R24
000052 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000053 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000054 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000055 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000056 93ed      	ST   X+,R30
000057 9701      	SBIW R24,1
000058 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000059 e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005b 9185      	LPM  R24,Z+
00005c 9195      	LPM  R25,Z+
00005d 9700      	SBIW R24,0
00005e f061      	BREQ __GLOBAL_INI_END
00005f 91a5      	LPM  R26,Z+
000060 91b5      	LPM  R27,Z+
000061 9005      	LPM  R0,Z+
000062 9015      	LPM  R1,Z+
000063 01bf      	MOVW R22,R30
000064 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000065 9005      	LPM  R0,Z+
000066 920d      	ST   X+,R0
000067 9701      	SBIW R24,1
000068 f7e1      	BRNE __GLOBAL_INI_LOOP
000069 01fb      	MOVW R30,R22
00006a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006c bfed      	OUT  SPL,R30
00006d e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000070 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000071 940c 00c1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;// Declare your global variables here
                 ;
                 ;#define ADC_VREF_TYPE ((1<<REFS1) | (1<<REFS0) | (1<<ADLAR))
                 ;#define up PINB.0 // nut nhan Up o pin B0
                 ;#define dw PINB.1
                 ;#define fan PORTB.2
                 ;#define light PORTB.3
                 ;unsigned char temp, m;
                 ;//Luu du lieu vao EEPROM
                 ;void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
                 ; 0000 0010 {
                 
                 	.CSEG
                 _EEPROM_write:
                 ; .FSTART _EEPROM_write
                 ; 0000 0011     while(EECR & (1<<EEWE));
000073 93aa      	ST   -Y,R26
                 ;	uiAddress -> Y+1
                 ;	ucData -> Y+0
                 _0x3:
000074 99e1      	SBIC 0x1C,1
000075 cffe      	RJMP _0x3
                 ; 0000 0012     EEAR = uiAddress;
000076 81e9      	LDD  R30,Y+1
000077 81fa      	LDD  R31,Y+1+1
000078 bbff      	OUT  0x1E+1,R31
000079 bbee      	OUT  0x1E,R30
                 ; 0000 0013     EEDR = ucData;
00007a 81e8      	LD   R30,Y
00007b bbed      	OUT  0x1D,R30
                 ; 0000 0014     EECR |= (1<<EEMWE);
00007c 9ae2      	SBI  0x1C,2
                 ; 0000 0015     EECR |= (1<<EEWE);
00007d 9ae1      	SBI  0x1C,1
                 ; 0000 0016 }
00007e c0d3      	RJMP _0x2020002
                 ; .FEND
                 ;//Doc du lieu tu EEPROM
                 ;unsigned char EEPROM_read(unsigned int uiAddress)
                 ; 0000 0019 {
                 _EEPROM_read:
                 ; .FSTART _EEPROM_read
                 ; 0000 001A     while(EECR & (1<<EEWE));
00007f 93ba      	ST   -Y,R27
000080 93aa      	ST   -Y,R26
                 ;	uiAddress -> Y+0
                 _0x6:
000081 99e1      	SBIC 0x1C,1
000082 cffe      	RJMP _0x6
                 ; 0000 001B     EEAR = uiAddress;
000083 81e8      	LD   R30,Y
000084 81f9      	LDD  R31,Y+1
000085 bbff      	OUT  0x1E+1,R31
000086 bbee      	OUT  0x1E,R30
                 ; 0000 001C     EECR |= (1<<EERE);
000087 9ae0      	SBI  0x1C,0
                 ; 0000 001D     return EEDR;
000088 b3ed      	IN   R30,0x1D
000089 c098      	RJMP _0x2020003
                 ; 0000 001E }
                 ; .FEND
                 ;//Doc tin hieu ADC
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0021 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0022     ADMUX = adc_input | ADC_VREF_TYPE;
00008a 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00008b 81e8      	LD   R30,Y
00008c 6ee0      	ORI  R30,LOW(0xE0)
00008d b9e7      	OUT  0x7,R30
                 ; 0000 0023     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0024     delay_us(10);
                +
00008e e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00008f 958a     +DEC R24
000090 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0025     // Start the AD conversion
                 ; 0000 0026     ADCSRA|=(1<<ADSC);
000091 9a36      	SBI  0x6,6
                 ; 0000 0027     // Wait for the AD conversion to complete
                 ; 0000 0028     while ((ADCSRA & (1<<ADIF))==0);
                 _0x9:
000092 9b34      	SBIS 0x6,4
000093 cffe      	RJMP _0x9
                 ; 0000 0029     ADCSRA|=(1<<ADIF);
000094 9a34      	SBI  0x6,4
                 ; 0000 002A     return ADCH;
000095 b1e5      	IN   R30,0x5
000096 c0e6      	RJMP _0x2020001
                 ; 0000 002B }
                 ; .FEND
                 ;//Dieu chinh nhiet do bang nut nhan
                 ;void button()
                 ; 0000 002E {
                 _button:
                 ; .FSTART _button
                 ; 0000 002F     delay_ms(20);
000097 e1a4      	LDI  R26,LOW(20)
000098 e0b0      	LDI  R27,0
000099 940e 01a3 	CALL _delay_ms
                 ; 0000 0030     if(up == 0)
00009b 99b0      	SBIC 0x16,0
00009c c007      	RJMP _0xC
                 ; 0000 0031     {
                 ; 0000 0032         m++;
00009d 9443      	INC  R4
                 ; 0000 0033         if(m > 99) m = 0;
00009e e6e3      	LDI  R30,LOW(99)
00009f 15e4      	CP   R30,R4
0000a0 f408      	BRSH _0xD
0000a1 2444      	CLR  R4
                 ; 0000 0034         while(up == 0);
                 _0xD:
                 _0xE:
0000a2 9bb0      	SBIS 0x16,0
0000a3 cffe      	RJMP _0xE
                 ; 0000 0035     }
                 ; 0000 0036     if(dw == 0)
                 _0xC:
0000a4 99b1      	SBIC 0x16,1
0000a5 c007      	RJMP _0x11
                 ; 0000 0037     {
                 ; 0000 0038         m--;
0000a6 944a      	DEC  R4
                 ; 0000 0039         if(m == 255) m = 0;
0000a7 efef      	LDI  R30,LOW(255)
0000a8 15e4      	CP   R30,R4
0000a9 f409      	BRNE _0x12
0000aa 2444      	CLR  R4
                 ; 0000 003A         while(dw == 0);
                 _0x12:
                 _0x13:
0000ab 9bb1      	SBIS 0x16,1
0000ac cffe      	RJMP _0x13
                 ; 0000 003B     }
                 ; 0000 003C     EEPROM_write(0,m);
                 _0x11:
0000ad e0e0      	LDI  R30,LOW(0)
0000ae e0f0      	LDI  R31,HIGH(0)
0000af 93fa      	ST   -Y,R31
0000b0 93ea      	ST   -Y,R30
0000b1 2da4      	MOV  R26,R4
0000b2 dfc0      	RCALL _EEPROM_write
                 ; 0000 003D }
0000b3 9508      	RET
                 ; .FEND
                 ;//Dieu kh?n quat va den
                 ;void out_relay()
                 ; 0000 0040 {
                 _out_relay:
                 ; .FSTART _out_relay
                 ; 0000 0041     if(temp > m)
0000b4 1445      	CP   R4,R5
0000b5 f418      	BRSH _0x16
                 ; 0000 0042     {
                 ; 0000 0043         fan=1;
0000b6 9ac2      	SBI  0x18,2
                 ; 0000 0044         light = 0;
0000b7 98c3      	CBI  0x18,3
                 ; 0000 0045     }
                 ; 0000 0046     else
0000b8 c002      	RJMP _0x1B
                 _0x16:
                 ; 0000 0047     {
                 ; 0000 0048         fan = 0;
0000b9 98c2      	CBI  0x18,2
                 ; 0000 0049         light = 1;
0000ba 9ac3      	SBI  0x18,3
                 ; 0000 004A     }
                 _0x1B:
                 ; 0000 004B }
0000bb 9508      	RET
                 ; .FEND
                 ;//Khoi tao ADC
                 ;void ADC_init()
                 ; 0000 004E {
                 _ADC_init:
                 ; .FSTART _ADC_init
                 ; 0000 004F     ADMUX=ADC_VREF_TYPE;
0000bc eee0      	LDI  R30,LOW(224)
0000bd b9e7      	OUT  0x7,R30
                 ; 0000 0050     ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
0000be eae2      	LDI  R30,LOW(162)
0000bf b9e6      	OUT  0x6,R30
                 ; 0000 0051 }
0000c0 9508      	RET
                 ; .FEND
                 ;void main(void)
                 ; 0000 0053 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0054     lcd_init(16);//Khai bao su dung lcd1602
0000c1 e1a0      	LDI  R26,LOW(16)
0000c2 d091      	RCALL _lcd_init
                 ; 0000 0055     /*
                 ; 0000 0056     Doi voi LCD2004: lcd_init(20);
                 ; 0000 0057     */
                 ; 0000 0058     ADC_init();
0000c3 dff8      	RCALL _ADC_init
                 ; 0000 0059     DDRA=0x00;
0000c4 e0e0      	LDI  R30,LOW(0)
0000c5 bbea      	OUT  0x1A,R30
                 ; 0000 005A     DDRB=0xfc;// chan b0-b1 la input, b2-b7 la output
0000c6 efec      	LDI  R30,LOW(252)
0000c7 bbe7      	OUT  0x17,R30
                 ; 0000 005B     DDRD=0xff;
0000c8 efef      	LDI  R30,LOW(255)
0000c9 bbe1      	OUT  0x11,R30
                 ; 0000 005C     m = EEPROM_read(0);
0000ca e0a0      	LDI  R26,LOW(0)
0000cb e0b0      	LDI  R27,0
0000cc dfb2      	RCALL _EEPROM_read
0000cd 2e4e      	MOV  R4,R30
                 ; 0000 005D     while (1)
                 _0x20:
                 ; 0000 005E     {
                 ; 0000 005F         // Place your code here
                 ; 0000 0060 
                 ; 0000 0061         lcd_gotoxy(0,0);
0000ce e0e0      	LDI  R30,LOW(0)
0000cf d0af      	RCALL SUBOPT_0x0
                 ; 0000 0062         lcd_puts("NHIET DO:");
                +
0000d0 e6a0     +LDI R26 , LOW ( _0x23 + ( 0 ) )
0000d1 e0b1     +LDI R27 , HIGH ( _0x23 + ( 0 ) )
                 	__POINTW2MN _0x23,0
0000d2 d070      	RCALL _lcd_puts
                 ; 0000 0063         lcd_gotoxy(10,0);
0000d3 e0ea      	LDI  R30,LOW(10)
0000d4 d0aa      	RCALL SUBOPT_0x0
                 ; 0000 0064         lcd_putchar(0x30+temp/10);
0000d5 2da5      	MOV  R26,R5
0000d6 d0ab      	RCALL SUBOPT_0x1
                 ; 0000 0065         lcd_putchar(0x30+temp%10);
0000d7 2da5      	MOV  R26,R5
0000d8 d0b1      	RCALL SUBOPT_0x2
                 ; 0000 0066         lcd_gotoxy(13,0);
0000d9 d0a5      	RCALL SUBOPT_0x0
                 ; 0000 0067         lcd_puts("*C");
                +
0000da e6aa     +LDI R26 , LOW ( _0x23 + ( 10 ) )
0000db e0b1     +LDI R27 , HIGH ( _0x23 + ( 10 ) )
                 	__POINTW2MN _0x23,10
0000dc d066      	RCALL _lcd_puts
                 ; 0000 0068         temp=read_adc(0);
0000dd e0a0      	LDI  R26,LOW(0)
0000de dfab      	RCALL _read_adc
0000df 2e5e      	MOV  R5,R30
                 ; 0000 0069         lcd_gotoxy(0,1);
0000e0 e0e0      	LDI  R30,LOW(0)
0000e1 d0b2      	RCALL SUBOPT_0x3
                 ; 0000 006A         lcd_puts("CAI DAT:");
                +
0000e2 e6ad     +LDI R26 , LOW ( _0x23 + ( 13 ) )
0000e3 e0b1     +LDI R27 , HIGH ( _0x23 + ( 13 ) )
                 	__POINTW2MN _0x23,13
0000e4 d05e      	RCALL _lcd_puts
                 ; 0000 006B         lcd_gotoxy(10,1);
0000e5 e0ea      	LDI  R30,LOW(10)
0000e6 d0ad      	RCALL SUBOPT_0x3
                 ; 0000 006C         lcd_putchar(0x30+m/10);
0000e7 2da4      	MOV  R26,R4
0000e8 d099      	RCALL SUBOPT_0x1
                 ; 0000 006D         lcd_putchar(0x30+m%10);
0000e9 2da4      	MOV  R26,R4
0000ea d09f      	RCALL SUBOPT_0x2
                 ; 0000 006E         lcd_gotoxy(13,1);
0000eb d0a8      	RCALL SUBOPT_0x3
                 ; 0000 006F         lcd_puts("*C");
                +
0000ec e7a6     +LDI R26 , LOW ( _0x23 + ( 22 ) )
0000ed e0b1     +LDI R27 , HIGH ( _0x23 + ( 22 ) )
                 	__POINTW2MN _0x23,22
0000ee d054      	RCALL _lcd_puts
                 ; 0000 0070         delay_ms(100);
0000ef e6a4      	LDI  R26,LOW(100)
0000f0 e0b0      	LDI  R27,0
0000f1 940e 01a3 	CALL _delay_ms
                 ; 0000 0071         out_relay();
0000f3 dfc0      	RCALL _out_relay
                 ; 0000 0072         button();
0000f4 dfa2      	RCALL _button
                 ; 0000 0073     }
0000f5 cfd8      	RJMP _0x20
                 ; 0000 0074 
                 ; 0000 0075 }
                 _0x24:
0000f6 cfff      	RJMP _0x24
                 ; .FEND
                 
                 	.DSEG
                 _0x23:
000160           	.BYTE 0x19
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000f7 93aa      	ST   -Y,R26
0000f8 b3e2      	IN   R30,0x12
0000f9 70ef      	ANDI R30,LOW(0xF)
0000fa 2fae      	MOV  R26,R30
0000fb 81e8      	LD   R30,Y
0000fc 7fe0      	ANDI R30,LOW(0xF0)
0000fd 2bea      	OR   R30,R26
0000fe bbe2      	OUT  0x12,R30
                +
0000ff e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000100 958a     +DEC R24
000101 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000102 9a92      	SBI  0x12,2
                +
000103 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000104 958a     +DEC R24
000105 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000106 9892      	CBI  0x12,2
                +
000107 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000108 958a     +DEC R24
000109 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00010a c072      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00010b 93aa      	ST   -Y,R26
00010c 81a8      	LD   R26,Y
00010d dfe9      	RCALL __lcd_write_nibble_G100
00010e 81e8          ld    r30,y
00010f 95e2          swap  r30
000110 83e8          st    y,r30
000111 81a8      	LD   R26,Y
000112 dfe4      	RCALL __lcd_write_nibble_G100
                +
000113 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000114 958a     +DEC R24
000115 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000116 c066      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000117 93aa      	ST   -Y,R26
000118 81e8      	LD   R30,Y
000119 e0f0      	LDI  R31,0
00011a 58e7      	SUBI R30,LOW(-__base_y_G100)
00011b 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00011c 81e0      	LD   R30,Z
00011d 81a9      	LDD  R26,Y+1
00011e 0fae      	ADD  R26,R30
00011f dfeb      	RCALL __lcd_write_data
000120 8079      	LDD  R7,Y+1
000121 8068      	LDD  R6,Y+0
                 _0x2020003:
000122 9622      	ADIW R28,2
000123 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000124 e0a2      	LDI  R26,LOW(2)
000125 d071      	RCALL SUBOPT_0x4
000126 e0ac      	LDI  R26,LOW(12)
000127 dfe3      	RCALL __lcd_write_data
000128 e0a1      	LDI  R26,LOW(1)
000129 d06d      	RCALL SUBOPT_0x4
00012a e0e0      	LDI  R30,LOW(0)
00012b 2e6e      	MOV  R6,R30
00012c 2e7e      	MOV  R7,R30
00012d 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00012e 93aa      	ST   -Y,R26
00012f 81a8      	LD   R26,Y
000130 30aa      	CPI  R26,LOW(0xA)
000131 f011      	BREQ _0x2000005
000132 1479      	CP   R7,R9
000133 f048      	BRLO _0x2000004
                 _0x2000005:
000134 e0e0      	LDI  R30,LOW(0)
000135 93ea      	ST   -Y,R30
000136 9463      	INC  R6
000137 2da6      	MOV  R26,R6
000138 dfde      	RCALL _lcd_gotoxy
000139 81a8      	LD   R26,Y
00013a 30aa      	CPI  R26,LOW(0xA)
00013b f409      	BRNE _0x2000007
00013c c040      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
00013d 9473      	INC  R7
00013e 9a90      	SBI  0x12,0
00013f 81a8      	LD   R26,Y
000140 dfca      	RCALL __lcd_write_data
000141 9890      	CBI  0x12,0
000142 c03a      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000143 93ba      	ST   -Y,R27
000144 93aa      	ST   -Y,R26
000145 931a      	ST   -Y,R17
                 _0x2000008:
000146 81a9      	LDD  R26,Y+1
000147 81ba      	LDD  R27,Y+1+1
000148 91ed      	LD   R30,X+
000149 83a9      	STD  Y+1,R26
00014a 83ba      	STD  Y+1+1,R27
00014b 2f1e      	MOV  R17,R30
00014c 30e0      	CPI  R30,0
00014d f019      	BREQ _0x200000A
00014e 2fa1      	MOV  R26,R17
00014f dfde      	RCALL _lcd_putchar
000150 cff5      	RJMP _0x2000008
                 _0x200000A:
000151 8118      	LDD  R17,Y+0
                 _0x2020002:
000152 9623      	ADIW R28,3
000153 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000154 93aa      	ST   -Y,R26
000155 b3e1      	IN   R30,0x11
000156 6fe0      	ORI  R30,LOW(0xF0)
000157 bbe1      	OUT  0x11,R30
000158 9a8a      	SBI  0x11,2
000159 9a88      	SBI  0x11,0
00015a 9a89      	SBI  0x11,1
00015b 9892      	CBI  0x12,2
00015c 9890      	CBI  0x12,0
00015d 9891      	CBI  0x12,1
00015e 8098      	LDD  R9,Y+0
00015f 81e8      	LD   R30,Y
000160 58e0      	SUBI R30,-LOW(128)
                +
000161 93e0 017b+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000163 81e8      	LD   R30,Y
000164 54e0      	SUBI R30,-LOW(192)
                +
000165 93e0 017c+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000167 e1a4      	LDI  R26,LOW(20)
000168 e0b0      	LDI  R27,0
000169 940e 01a3 	CALL _delay_ms
00016b d030      	RCALL SUBOPT_0x5
00016c d02f      	RCALL SUBOPT_0x5
00016d d02e      	RCALL SUBOPT_0x5
00016e e2a0      	LDI  R26,LOW(32)
00016f df87      	RCALL __lcd_write_nibble_G100
                +
000170 ec88     +LDI R24 , LOW ( 200 )
000171 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000172 9701     +SBIW R24 , 1
000173 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000174 e2a8      	LDI  R26,LOW(40)
000175 df95      	RCALL __lcd_write_data
000176 e0a4      	LDI  R26,LOW(4)
000177 df93      	RCALL __lcd_write_data
000178 e8a5      	LDI  R26,LOW(133)
000179 df91      	RCALL __lcd_write_data
00017a e0a6      	LDI  R26,LOW(6)
00017b df8f      	RCALL __lcd_write_data
00017c dfa7      	RCALL _lcd_clear
                 _0x2020001:
00017d 9621      	ADIW R28,1
00017e 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000179           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00017f 93ea      	ST   -Y,R30
000180 e0a0      	LDI  R26,LOW(0)
000181 cf95      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
000182 e0b0      	LDI  R27,0
000183 e0ea      	LDI  R30,LOW(10)
000184 e0f0      	LDI  R31,HIGH(10)
000185 940e 01c4 	CALL __DIVW21
000187 5de0      	SUBI R30,-LOW(48)
000188 2fae      	MOV  R26,R30
000189 cfa4      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
00018a 27bb      	CLR  R27
00018b e0ea      	LDI  R30,LOW(10)
00018c e0f0      	LDI  R31,HIGH(10)
00018d 940e 01c9 	CALL __MODW21
00018f 5de0      	SUBI R30,-LOW(48)
000190 2fae      	MOV  R26,R30
000191 df9c      	RCALL _lcd_putchar
000192 e0ed      	LDI  R30,LOW(13)
000193 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000194 93ea      	ST   -Y,R30
000195 e0a1      	LDI  R26,LOW(1)
000196 cf80      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000197 df73      	RCALL __lcd_write_data
000198 e0a3      	LDI  R26,LOW(3)
000199 e0b0      	LDI  R27,0
00019a 940c 01a3 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
00019c e3a0      	LDI  R26,LOW(48)
00019d df59      	RCALL __lcd_write_nibble_G100
                +
00019e ec88     +LDI R24 , LOW ( 200 )
00019f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001a0 9701     +SBIW R24 , 1
0001a1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001a2 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001a3 9610      	adiw r26,0
0001a4 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001a5 ed80     +LDI R24 , LOW ( 0x7D0 )
0001a6 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001a7 9701     +SBIW R24 , 1
0001a8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001a9 95a8      	wdr
0001aa 9711      	sbiw r26,1
0001ab f7c9      	brne __delay_ms0
                 __delay_ms1:
0001ac 9508      	ret
                 
                 __ANEGW1:
0001ad 95f1      	NEG  R31
0001ae 95e1      	NEG  R30
0001af 40f0      	SBCI R31,0
0001b0 9508      	RET
                 
                 __DIVW21U:
0001b1 2400      	CLR  R0
0001b2 2411      	CLR  R1
0001b3 e190      	LDI  R25,16
                 __DIVW21U1:
0001b4 0faa      	LSL  R26
0001b5 1fbb      	ROL  R27
0001b6 1c00      	ROL  R0
0001b7 1c11      	ROL  R1
0001b8 1a0e      	SUB  R0,R30
0001b9 0a1f      	SBC  R1,R31
0001ba f418      	BRCC __DIVW21U2
0001bb 0e0e      	ADD  R0,R30
0001bc 1e1f      	ADC  R1,R31
0001bd c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001be 60a1      	SBR  R26,1
                 __DIVW21U3:
0001bf 959a      	DEC  R25
0001c0 f799      	BRNE __DIVW21U1
0001c1 01fd      	MOVW R30,R26
0001c2 01d0      	MOVW R26,R0
0001c3 9508      	RET
                 
                 __DIVW21:
0001c4 d012      	RCALL __CHKSIGNW
0001c5 dfeb      	RCALL __DIVW21U
0001c6 f40e      	BRTC __DIVW211
0001c7 dfe5      	RCALL __ANEGW1
                 __DIVW211:
0001c8 9508      	RET
                 
                 __MODW21:
0001c9 94e8      	CLT
0001ca ffb7      	SBRS R27,7
0001cb c004      	RJMP __MODW211
0001cc 95a0      	COM  R26
0001cd 95b0      	COM  R27
0001ce 9611      	ADIW R26,1
0001cf 9468      	SET
                 __MODW211:
0001d0 fdf7      	SBRC R31,7
0001d1 dfdb      	RCALL __ANEGW1
0001d2 dfde      	RCALL __DIVW21U
0001d3 01fd      	MOVW R30,R26
0001d4 f40e      	BRTC __MODW212
0001d5 dfd7      	RCALL __ANEGW1
                 __MODW212:
0001d6 9508      	RET
                 
                 __CHKSIGNW:
0001d7 94e8      	CLT
0001d8 fff7      	SBRS R31,7
0001d9 c002      	RJMP __CHKSW1
0001da dfd2      	RCALL __ANEGW1
0001db 9468      	SET
                 __CHKSW1:
0001dc ffb7      	SBRS R27,7
0001dd c006      	RJMP __CHKSW2
0001de 95a0      	COM  R26
0001df 95b0      	COM  R27
0001e0 9611      	ADIW R26,1
0001e1 f800      	BLD  R0,0
0001e2 9403      	INC  R0
0001e3 fa00      	BST  R0,0
                 __CHKSW2:
0001e4 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  12 r1 :   5 r2 :   0 r3 :   0 r4 :  11 r5 :   4 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  23 r25:   7 r26:  67 r27:  22 r28:   4 r29:   1 r30:  92 r31:  19 
x  :   4 y  :  43 z  :   8 
Registers used: 20 out of 35 (57.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   6 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  15 brpl  :   0 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   5 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   4 cpc   :   0 cpi   :   3 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   4 jmp   :  23 ld    :  15 ldd   :  10 ldi   :  77 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  15 movw  :   6 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   2 out   :  19 pop   :   0 push  :   0 rcall :  49 ret   :  15 
reti  :   0 rjmp  :  26 rol   :   3 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :  12 sbic  :   4 sbis  :   3 sbiw  :   7 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  21 std   :   2 sts   :   2 sub   :   1 subi  :   5 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 56 out of 116 (48.3%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003ca    914     56    970   16384   5.9%
[.dseg] 0x000060 0x00017d      0     29     29    1024   2.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
